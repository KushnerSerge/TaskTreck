// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace TaskTreck.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectId");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f93e88d-8c58-4633-bef7-9206b2f7c34d"),
                            Description = "Revamp the company's main website for better UX.",
                            EndDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Website Redesign",
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4dba79d2-6e3b-41ea-a2f8-d511d9d36c54"),
                            Description = "Develop a new mobile app for customer engagement.",
                            EndDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mobile App Development",
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskItemId");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ac6734e-0f7a-4a96-9a35-2d854b69c18f"),
                            Description = "Design wireframes for all main pages.",
                            Priority = 3,
                            ProjectId = new Guid("5f93e88d-8c58-4633-bef7-9206b2f7c34d"),
                            Status = "In Progress",
                            Title = "Create Wireframes"
                        },
                        new
                        {
                            Id = new Guid("4ad8b845-292c-42ec-9332-61e4a743d8a9"),
                            Description = "Implement frontend components using Angular.",
                            Priority = 4,
                            ProjectId = new Guid("5f93e88d-8c58-4633-bef7-9206b2f7c34d"),
                            Status = "Not Started",
                            Title = "Develop Frontend"
                        },
                        new
                        {
                            Id = new Guid("15dd8b18-0282-44b9-b8b5-dad1b20b8e73"),
                            Description = "Develop RESTful APIs for the mobile app backend.",
                            Priority = 5,
                            ProjectId = new Guid("4dba79d2-6e3b-41ea-a2f8-d511d9d36c54"),
                            Status = "In Progress",
                            Title = "Create API Endpoints"
                        },
                        new
                        {
                            Id = new Guid("bcf4c86a-b2d1-408f-8c86-b19cb5ec6498"),
                            Description = "Perform QA testing for mobile app functionality.",
                            Priority = 2,
                            ProjectId = new Guid("4dba79d2-6e3b-41ea-a2f8-d511d9d36c54"),
                            Status = "Not Started",
                            Title = "Test Mobile App Features"
                        });
                });

            modelBuilder.Entity("Entities.Models.TaskItem", b =>
                {
                    b.HasOne("Entities.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Entities.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
